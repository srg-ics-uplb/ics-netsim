package devices.routers.consoles.commands;

import devices.commands.Command;


public class ConfigurationCommand {
    public final static Command AAA = new Command("aaa", "Authentication, Authorization and Accounting.");
    public final static Command ACCESS_LIST = new Command("access-list", "Add an access list entry");
    public final static Command ACCESS_LIST_1_99 = new Command("<1-99>", "IP standard access list");
    public final static Command ACCESS_LIST_1_99_DENY = new Command("deny", "Specify packets to reject");
    public final static Command ACCESS_LIST_1_99_DENY_ABCD = new Command("a.b.c.d", "Address to match");
    public final static Command ACCESS_LIST_1_99_DENY_ABCD_ABCD = new Command("a.b.c.d", "Wildcard bits");
    public final static Command ACCESS_LIST_1_99_DENY_ANY = new Command("any", "Any source host");
    public final static Command ACCESS_LIST_1_99_DENY_ANY_ABCD = new Command("a.b.c.d", "Wildcard bits");
    public final static Command ACCESS_LIST_1_99_PERMIT = new Command("permit", "Specify packets to forward");
    public final static Command ACCESS_LIST_1_99_PERMIT_ABCD = new Command("a.b.c.d", "Address to match");
    public final static Command ACCESS_LIST_1_99_PERMIT_ABCD_ABCD = new Command("a.b.c.d", "Wildcard bits");
    public final static Command ACCESS_LIST_1_99_PERMIT_ANY = new Command("any", "Any source host");
    public final static Command ACCESS_LIST_1_99_PERMIT_ANY_ABCD = new Command("a.b.c.d", "Wildcard bits");
    public final static Command ACCESS_LIST_100_199 = new Command("<100-199>", "IP extended access list");
    public final static Command ACCESS_LIST_100_199_DENY = new Command("deny", "Specify packets to reject");
    
    public final static Command ACCESS_LIST_100_199_DENY_EIGRP = new Command("eigrp", "Cisco's EIGRP routing protocol");
    public final static Command ACCESS_LIST_100_199_DENY_EIGRP_ABCD = new Command("a.b.c.d", "Source address");
    public final static Command ACCESS_LIST_100_199_DENY_EIGRP_ABCD_ABCD = new Command("a.b.c.d", "Source wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_EIGRP_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_DENY_EIGRP_ABCD_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Desination wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_EIGRP_ABCD_ABCD_ANY = new Command("any", "");
    public final static Command ACCESS_LIST_100_199_DENY_EIGRP_ANY = new Command("any", "Any source host");
    public final static Command ACCESS_LIST_100_199_DENY_EIGRP_ANY_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_DENY_EIGRP_ANY_ABCD_ABCD = new Command("a.b.c.d", "Destination wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_EIGRP_ANY_ANY = new Command("any", "Any destination host");    
    public final static Command ACCESS_LIST_100_199_DENY_EIGRP_ANY_ANY_LOG = new Command("log", "Log matches against this entry");
    
    
    public final static Command ACCESS_LIST_100_199_DENY_ICMP = new Command("icmp", "Internet Control Message Protocol");
    public final static Command ACCESS_LIST_100_199_DENY_ICMP_ABCD = new Command("a.b.c.d", "Source address");
    public final static Command ACCESS_LIST_100_199_DENY_ICMP_ABCD_ABCD = new Command("a.b.c.d", "Source wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_ICMP_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_DENY_ICMP_ABCD_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Desination wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_ICMP_ABCD_ABCD_ANY = new Command("any", "");
    public final static Command ACCESS_LIST_100_199_DENY_ICMP_ANY = new Command("any", "Any source host");
    public final static Command ACCESS_LIST_100_199_DENY_ICMP_ANY_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_DENY_ICMP_ANY_ABCD_ABCD = new Command("a.b.c.d", "Destination wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_ICMP_ANY_ANY = new Command("any", "Any destination host");    
    public final static Command ACCESS_LIST_100_199_DENY_ICMP_ANY_ANY_LOG = new Command("log", "Log matches against this entry");
              
    public final static Command ACCESS_LIST_100_199_DENY_IGRP = new Command("igrp", "Cisco's IGRP routing protocol");
    public final static Command ACCESS_LIST_100_199_DENY_IGRP_ABCD = new Command("a.b.c.d", "Source address");
    public final static Command ACCESS_LIST_100_199_DENY_IGRP_ABCD_ABCD = new Command("a.b.c.d", "Source wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_IGRP_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_DENY_IGRP_ABCD_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Desination wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_IGRP_ABCD_ABCD_ANY = new Command("any", "");
    public final static Command ACCESS_LIST_100_199_DENY_IGRP_ANY = new Command("any", "Any source host");
    public final static Command ACCESS_LIST_100_199_DENY_IGRP_ANY_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_DENY_IGRP_ANY_ABCD_ABCD = new Command("a.b.c.d", "Destination wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_IGRP_ANY_ANY = new Command("any", "Any destination host");    
    public final static Command ACCESS_LIST_100_199_DENY_IGRP_ANY_ANY_LOG = new Command("log", "Log matches against this entry");
    
    public final static Command ACCESS_LIST_100_199_DENY_IP = new Command("ip", "Any Internet Protocol");
    public final static Command ACCESS_LIST_100_199_DENY_IP_ABCD = new Command("a.b.c.d", "Source address");
    public final static Command ACCESS_LIST_100_199_DENY_IP_ABCD_ABCD = new Command("a.b.c.d", "Source wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_IP_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_DENY_IP_ABCD_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Desination wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_IP_ABCD_ABCD_ANY = new Command("any", "");
    public final static Command ACCESS_LIST_100_199_DENY_IP_ANY = new Command("any", "Any source host");
    public final static Command ACCESS_LIST_100_199_DENY_IP_ANY_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_DENY_IP_ANY_ABCD_ABCD = new Command("a.b.c.d", "Destination wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_IP_ANY_ANY = new Command("any", "Any destination host");    
    public final static Command ACCESS_LIST_100_199_DENY_IP_ANY_ANY_LOG = new Command("log", "Log matches against this entry");
    
    public final static Command ACCESS_LIST_100_199_DENY_OSPF = new Command("ospf", "OSPF routing protocol");
    public final static Command ACCESS_LIST_100_199_DENY_OSPF_ABCD = new Command("a.b.c.d", "Source address");
    public final static Command ACCESS_LIST_100_199_DENY_OSPF_ABCD_ABCD = new Command("a.b.c.d", "Source wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_OSPF_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_DENY_OSPF_ABCD_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Desination wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_OSPF_ABCD_ABCD_ANY = new Command("any", "");
    public final static Command ACCESS_LIST_100_199_DENY_OSPF_ANY = new Command("any", "Any source host");
    public final static Command ACCESS_LIST_100_199_DENY_OSPF_ANY_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_DENY_OSPF_ANY_ABCD_ABCD = new Command("a.b.c.d", "Destination wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_OSPF_ANY_ANY = new Command("any", "Any destination host");    
    public final static Command ACCESS_LIST_100_199_DENY_OSPF_ANY_ANY_LOG = new Command("log", "Log matches against this entry");
   
    public final static Command ACCESS_LIST_100_199_DENY_TCP = new Command("tcp", "Transmission Control Protocol");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ABCD = new Command("a.b.c.d", "Source address");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ABCD_ABCD = new Command("a.b.c.d", "Source wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ABCD_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Desination wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ABCD_ABCD_ABCD_ABCD_EQ = new Command("eq", "Match only packets on a given port number");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ABCD_ABCD_ABCD_ABCD_EQ_0_65535 = new Command("<0-65535>", "Port number");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ABCD_ABCD_ANY = new Command("any", "");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ABCD_ABCD_ANY_EQ = new Command("eq", "Match only packets on a given port number");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ABCD_ABCD_ANY_EQ_0_65535 = new Command("<0-65535>", "Port number");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ANY = new Command("any", "Any source host");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ANY_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ANY_ABCD_ABCD = new Command("a.b.c.d", "Destination wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ANY_ABCD_ABCD_EQ = new Command("eq", "Match only packets on a given port number");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ANY_ABCD_ABCD_EQ_0_65535 = new Command("<0-65535>", "Port number");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ANY_ANY = new Command("any", "Any destination host");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ANY_ANY_EQ = new Command("eq", "Match only packets on a given port number");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ANY_ANY_EQ_0_65535 = new Command("<0-65535>", "Port number");
    public final static Command ACCESS_LIST_100_199_DENY_TCP_ANY_ANY_LOG = new Command("log", "Log matches against this entry");
    
    public final static Command ACCESS_LIST_100_199_DENY_UDP = new Command("udp", "User Datagram Protocol");
    public final static Command ACCESS_LIST_100_199_DENY_UDP_ABCD = new Command("a.b.c.d", "Source address");
    public final static Command ACCESS_LIST_100_199_DENY_UDP_ABCD_ABCD = new Command("a.b.c.d", "Source wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_UDP_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_DENY_UDP_ABCD_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Desination wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_UDP_ABCD_ABCD_ANY = new Command("any", "");
    public final static Command ACCESS_LIST_100_199_DENY_UDP_ANY = new Command("any", "Any source host");
    public final static Command ACCESS_LIST_100_199_DENY_UDP_ANY_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_DENY_UDP_ANY_ABCD_ABCD = new Command("a.b.c.d", "Destination wildcard bits");
    public final static Command ACCESS_LIST_100_199_DENY_UDP_ANY_ANY = new Command("any", "Any destination host");    
    public final static Command ACCESS_LIST_100_199_DENY_UDP_ANY_ANY_LOG = new Command("log", "Log matches against this entry");
    
    public final static Command ACCESS_LIST_100_199_PERMIT = new Command("permit", "Specify packets to forward");
    public final static Command ACCESS_LIST_100_199_PERMIT_EIGRP = new Command("eigrp", "Cisco's EIGRP routing protocol");
    public final static Command ACCESS_LIST_100_199_PERMIT_EIGRP_ABCD = new Command("a.b.c.d", "Source address");
    public final static Command ACCESS_LIST_100_199_PERMIT_EIGRP_ABCD_ABCD = new Command("a.b.c.d", "Source wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_EIGRP_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_PERMIT_EIGRP_ABCD_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Desination wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_EIGRP_ABCD_ABCD_ANY = new Command("any", "");
    public final static Command ACCESS_LIST_100_199_PERMIT_EIGRP_ANY = new Command("any", "Any source host");
    public final static Command ACCESS_LIST_100_199_PERMIT_EIGRP_ANY_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_PERMIT_EIGRP_ANY_ABCD_ABCD = new Command("a.b.c.d", "Destination wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_EIGRP_ANY_ANY = new Command("any", "Any destination host");    
    public final static Command ACCESS_LIST_100_199_PERMIT_EIGRP_ANY_ANY_LOG = new Command("log", "Log matches against this entry");
    
    
    public final static Command ACCESS_LIST_100_199_PERMIT_ICMP = new Command("icmp", "Internet Control Message Protocol");
    public final static Command ACCESS_LIST_100_199_PERMIT_ICMP_ABCD = new Command("a.b.c.d", "Source address");
    public final static Command ACCESS_LIST_100_199_PERMIT_ICMP_ABCD_ABCD = new Command("a.b.c.d", "Source wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_ICMP_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_PERMIT_ICMP_ABCD_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Desination wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_ICMP_ABCD_ABCD_ANY = new Command("any", "");
    public final static Command ACCESS_LIST_100_199_PERMIT_ICMP_ANY = new Command("any", "Any source host");
    public final static Command ACCESS_LIST_100_199_PERMIT_ICMP_ANY_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_PERMIT_ICMP_ANY_ABCD_ABCD = new Command("a.b.c.d", "Destination wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_ICMP_ANY_ANY = new Command("any", "Any destination host");    
    public final static Command ACCESS_LIST_100_199_PERMIT_ICMP_ANY_ANY_LOG = new Command("log", "Log matches against this entry");
              
    public final static Command ACCESS_LIST_100_199_PERMIT_IGRP = new Command("igrp", "Cisco's IGRP routing protocol");
    public final static Command ACCESS_LIST_100_199_PERMIT_IGRP_ABCD = new Command("a.b.c.d", "Source address");
    public final static Command ACCESS_LIST_100_199_PERMIT_IGRP_ABCD_ABCD = new Command("a.b.c.d", "Source wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_IGRP_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_PERMIT_IGRP_ABCD_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Desination wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_IGRP_ABCD_ABCD_ANY = new Command("any", "");
    public final static Command ACCESS_LIST_100_199_PERMIT_IGRP_ANY = new Command("any", "Any source host");
    public final static Command ACCESS_LIST_100_199_PERMIT_IGRP_ANY_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_PERMIT_IGRP_ANY_ABCD_ABCD = new Command("a.b.c.d", "Destination wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_IGRP_ANY_ANY = new Command("any", "Any destination host");    
    public final static Command ACCESS_LIST_100_199_PERMIT_IGRP_ANY_ANY_LOG = new Command("log", "Log matches against this entry");
    
    public final static Command ACCESS_LIST_100_199_PERMIT_IP = new Command("ip", "Any Internet Protocol");
    public final static Command ACCESS_LIST_100_199_PERMIT_IP_ABCD = new Command("a.b.c.d", "Source address");
    public final static Command ACCESS_LIST_100_199_PERMIT_IP_ABCD_ABCD = new Command("a.b.c.d", "Source wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_IP_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_PERMIT_IP_ABCD_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Desination wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_IP_ABCD_ABCD_ANY = new Command("any", "");
    public final static Command ACCESS_LIST_100_199_PERMIT_IP_ANY = new Command("any", "Any source host");
    public final static Command ACCESS_LIST_100_199_PERMIT_IP_ANY_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_PERMIT_IP_ANY_ABCD_ABCD = new Command("a.b.c.d", "Destination wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_IP_ANY_ANY = new Command("any", "Any destination host");    
    public final static Command ACCESS_LIST_100_199_PERMIT_IP_ANY_ANY_LOG = new Command("log", "Log matches against this entry");
    
    public final static Command ACCESS_LIST_100_199_PERMIT_OSPF = new Command("ospf", "OSPF routing protocol");
    public final static Command ACCESS_LIST_100_199_PERMIT_OSPF_ABCD = new Command("a.b.c.d", "Source address");
    public final static Command ACCESS_LIST_100_199_PERMIT_OSPF_ABCD_ABCD = new Command("a.b.c.d", "Source wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_OSPF_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_PERMIT_OSPF_ABCD_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Desination wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_OSPF_ABCD_ABCD_ANY = new Command("any", "");
    public final static Command ACCESS_LIST_100_199_PERMIT_OSPF_ANY = new Command("any", "Any source host");
    public final static Command ACCESS_LIST_100_199_PERMIT_OSPF_ANY_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_PERMIT_OSPF_ANY_ABCD_ABCD = new Command("a.b.c.d", "Destination wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_OSPF_ANY_ANY = new Command("any", "Any destination host");    
    public final static Command ACCESS_LIST_100_199_PERMIT_OSPF_ANY_ANY_LOG = new Command("log", "Log matches against this entry");
   
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP = new Command("tcp", "Transmission Control Protocol");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ABCD = new Command("a.b.c.d", "Source address");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ABCD_ABCD = new Command("a.b.c.d", "Source wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ABCD_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Desination wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ABCD_ABCD_ABCD_ABCD_EQ = new Command("eq", "Match only packets on a given port number");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ABCD_ABCD_ABCD_ABCD_EQ_0_65535 = new Command("<0-65535>", "Port number");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ABCD_ABCD_ANY = new Command("any", "");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ABCD_ABCD_ANY_EQ = new Command("eq", "Match only packets on a given port number");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ABCD_ABCD_ANY_EQ_0_65535 = new Command("<0-65535>", "Port number");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ANY = new Command("any", "Any source host");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ANY_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ANY_ABCD_ABCD = new Command("a.b.c.d", "Destination wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ANY_ABCD_ABCD_EQ = new Command("eq", "Match only packets on a given port number");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ANY_ABCD_ABCD_EQ_0_65535 = new Command("<0-65535>", "Port number");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ANY_ANY = new Command("any", "Any destination host");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ANY_ANY_EQ = new Command("eq", "Match only packets on a given port number");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ANY_ANY_EQ_0_65535 = new Command("<0-65535>", "Port number");
    public final static Command ACCESS_LIST_100_199_PERMIT_TCP_ANY_ANY_LOG = new Command("log", "Log matches against this entry");
    
    public final static Command ACCESS_LIST_100_199_PERMIT_UDP = new Command("udp", "User Datagram Protocol");
    public final static Command ACCESS_LIST_100_199_PERMIT_UDP_ABCD = new Command("a.b.c.d", "Source address");
    public final static Command ACCESS_LIST_100_199_PERMIT_UDP_ABCD_ABCD = new Command("a.b.c.d", "Source wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_UDP_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_PERMIT_UDP_ABCD_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Desination wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_UDP_ABCD_ABCD_ANY = new Command("any", "");
    public final static Command ACCESS_LIST_100_199_PERMIT_UDP_ANY = new Command("any", "Any source host");
    public final static Command ACCESS_LIST_100_199_PERMIT_UDP_ANY_ABCD = new Command("a.b.c.d", "Destination address");
    public final static Command ACCESS_LIST_100_199_PERMIT_UDP_ANY_ABCD_ABCD = new Command("a.b.c.d", "Destination wildcard bits");
    public final static Command ACCESS_LIST_100_199_PERMIT_UDP_ANY_ANY = new Command("any", "Any destination host");    
    public final static Command ACCESS_LIST_100_199_PERMIT_UDP_ANY_ANY_LOG = new Command("log", "Log matches against this entry");
    
    
    public final static Command ARP = new Command("arp", "Set Static ARP Entry");
    public final static Command BANNER = new Command("banner", "Define a login banner");
    public final static Command BOOT = new Command("boot", "Modify system boot parameters");
    public final static Command CDP = new Command("cdp", "Global CDP configuration subcommands");
    public final static Command CLASS_MAP = new Command("class-map", "Configure QoS Class Map");
    public final static Command CONFIG_REGISTER = new Command("config-register", "Define the configuration register");
    public final static Command CONTROLLER = new Command("controller", "Configure a specific controller");
    public final static Command CRYPTO = new Command("crypto", "Encryption module");
    public final static Command DIALER_LIST = new Command("dialer-list", "Create a dialer list entry");
    public final static Command ENABLE = new Command("enable", "Modify enable password parameters");
    public final static Command ENABLE_PASSWORD = new Command("password", "Assign the privileged level password");
    public final static Command ENABLE_PASSWORD_LEVEL = new Command("level", "Set exec level password");
    public final static Command ENABLE_PASSWORD_LEVEL_15 = new Command("15", "level number");
    public final static Command ENABLE_PASSWORD_LEVEL_15_WORD = new Command("word", "The UNENCRYPTED (clear text) 'enable' password");
    public final static Command ENABLE_PASSWORD_SWITCH = new Command("password", "Assign privileged password");
    public final static Command ENABLE_SECRET = new Command("secret", "Assign the privileged level secret");
    public final static Command ENABLE_SECRET_LEVEL = new Command("level", "Set exec level password");
    public final static Command ENABLE_SECRET_LEVEL_15 = new Command("15", "level number");
    public final static Command ENABLE_SECRET_SWITCH = new Command("secret", "Assign privileged password");
    public final static Command END = new Command("end", "Exit from configure mode");
    public final static Command ENABLE_SECRET_LEVEL_15_WORD = new Command("word", "The UNENCRYPTED (clear text) 'enable' password");
    public final static Command EXIT = new Command("exit", "Exit from configure mode");
    public final static Command FRAME_RELAY = new Command("frame-relay", "global frame relay configuration commands");
    public final static Command HELP = new Command("help", "Description of the interactive help system");
    public final static Command HOSTNAME = new Command("hostname", "Set system's network name");
    public final static Command INTERFACE = new Command("interface", "Select an interface to configure");
    public final static Command INTERFACE_ETHERNET = new Command("ethernet", "IEEE 802.3");
    public final static Command IP = new Command("ip", "Global IP configuration subcommands");
    public final static Command IP_ACCESS_LIST = new Command("access-list", "Named access-list");
    public final static Command IP_CLASSLESS = new Command("classless", "Follow classless routing forwarding rules");
    public final static Command IP_DHCP = new Command("dhcp", "Configure DHCP server and relay paramters");
    public final static Command IP_DOMAIN_LOOKUP = new Command("domain-lookup", "Enable IP Domani Name System hostname translation");
    public final static Command IP_HOST = new Command("host", "Add an entry to the ip hostname table");
    public final static Command IP_HTTP = new Command("http", "HTTP server configuration");
    public final static Command IP_NAT = new Command("nat", "NAT configuration commnads");
    public final static Command IP_ROUTE = new Command("route", "Establish static routes");
    public final static Command IP_ROUTE_ABCD = new Command("a.b.c.d", "Destination prefix");
    public final static Command IP_ROUTE_ABCD_ABCD = new Command("a.b.c.d", "Destination prefix mask");
    public final static Command IP_ROUTE_ABCD_ABCD_ABCD = new Command("a.b.c.d", "Forwarding router's address");
    public final static Command IP_ROUTE_ABCD_ABCD_DIALER = new Command("dialer", "");
    public final static Command IP_ROUTE_ABCD_ABCD_SERIAL = new Command("serial", "");
    public final static Command ISDN = new Command("isdn", "ISDN configuration commands");
    public final static Command LINE = new Command("line", "Configure a terminal line");
    public final static Command LOGGING = new Command("logging", "Modify message logging facilities");
    public final static Command MAC_ADDRESS_TABLE = new Command("mac-address-table", "Configure the mac address table");
    public final static Command MAP_CLASS = new Command("map-class", "Configure static map class");
    public final static Command MAP_LIST = new Command("map-list", "Configure static map list");
    public final static Command MULTILINK = new Command("multilink", "PPP multilink global configuration");
    public final static Command NO = new Command("no", "Negate a command or set its defaults");
    public final static Command NTP = new Command("ntp", "Configure NTP");
    public final static Command POLICY_MAP = new Command("policy-map", "Configure QoS Policy Map");
    public final static Command PRIORITY_LIST = new Command("priority-list", "Build a priority list");
    public final static Command PRIVILEGE = new Command("privilege", "Command privilege parameters");
    public final static Command RIP = new Command("rip", "Routing information protocol configuration");
    public final static Command RLOGIN = new Command("rlogin", "Rlogin configuration commands");
    public final static Command RMON = new Command("rmon", "Remote Monitoring");
    public final static Command ROUTE_MAP = new Command("route-map", "Create route-map or enter route-map command mode");
    public final static Command ROUTER = new Command("router", "Enable a routing process");
    public final static Command ROUTER_RIP = new Command("rip", "Routing Information Protocol (RIP)");
    public final static Command ROUTER_IGRP = new Command("igrp", "Interior Gateway Routing Protocol (IGRP)");
    public final static Command ROUTER_EIGRP = new Command("eigrp", "Enhanced Interior Gateway Routing Protocol (EIGRP)");
    public final static Command ROUTER_OSPF = new Command("ospf", "Open Shortest Path First (OSPF)");
    public final static Command ROUTER_BGP = new Command("bgp", "Border Gateway Protocol (BGP)");
    public final static Command ROUTER_ISIS = new Command("isis", "ISO IS-IS");
    public final static Command SERVICE = new Command("service", "Modify use of network based services");
    public final static Command SERVICE_SWITCH = new Command("service", "Configuration Command");
    public final static Command SPANTREE = new Command("spantree", "Spanning tree subsystem");
    public final static Command SWITCHING_MODE = new Command("switching-mode", "Sets the switching mode");
    public final static Command TACACS_SERVER = new Command("tacacs-server", "Modify TACACS query parameters");
    public final static Command TFTP_SERVER = new Command("tftp-server", "Provide TFTP service for netload requests");
    public final static Command UPLINK_FAST = new Command("uplink-fast", "Enable Uplink fast");
    public final static Command USERNAME = new Command("username", "Establish User Name Authentication");
    public final static Command VLAN = new Command("vlan", "VLAN configuration");
    public final static Command VLAN_1_1001 = new Command("<1-1001>", "ISL VLAN index");
    public final static Command VLAN_1_1001_ETHERNET = new Command("ethernet", "ethernet");
    public final static Command VLAN_1_1001_FDDI = new Command("fddi", "fddi");
    public final static Command VLAN_1_1001_MTU = new Command("mtu", "VLAN MTU");
    public final static Command VLAN_1_1001_NAME = new Command("name", "Set VLAN name");
    public final static Command VLAN_1_1001_NAME_WORD = new Command("word", "VLAN name");
    public final static Command VLAN_1_1001_SDE = new Command("sde", "IEE 801.10 Said");
    public final static Command VLAN_1_1001_STATE = new Command("state", "VLAN state");
    public final static Command VLAN_SERVER = new Command("server", "vlan membership server");
    public final static Command VLAN_MEMBERSHIP = new Command("vlan-membership", "VLAN membership server configuration");
    public final static Command VTP = new Command("vtp", "Global VTP configuration commands");
}
